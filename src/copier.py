import os
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Iterable

from .config import Settings, PathRule
from .utils import copy2, same_file


# ‚îÄ‚îÄ –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _norm(p: str | Path) -> Path:
    p = Path(p)
    return Path(*p.parts) if p.parts and p.parts[0] == p.root else p


def _skip(rel: Path, excluded: set[Path]) -> bool:
    for e in excluded:
        if rel == e or rel.is_relative_to(e):
            return True
    return False


def _iter_files(rule: PathRule) -> Iterable[Path]:
    root = Path(rule.source).expanduser().resolve()
    excluded = {_norm(e) for e in rule.excludes}
    for cur, subdirs, files in os.walk(root, topdown=True):
        rel_dir = Path(cur).relative_to(root)
        if _skip(rel_dir, excluded):
            subdirs[:] = []
            continue
        subdirs[:] = [d for d in subdirs if not _skip(rel_dir / d, excluded)]
        for f in files:
            rel_file = rel_dir / f
            if _skip(rel_file, excluded):
                continue
            yield root / rel_file


@dataclass
class Stats:
    scanned: int = 0
    copied: int = 0
    unchanged: int = 0
    errors: int = 0

    def summary(self) -> str:
        return (f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {self.scanned}  |  "
                f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {self.copied}  |  "
                f"–ù–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {self.unchanged}  |  "
                f"–û—à–∏–±–æ–∫: {self.errors}")


# ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def run_backup(cfg: Settings, use_hash: bool = False) -> None:
    # 0) –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    print("üîç –°—Ç–∞—Ä—Ç –±—ç–∫–∞–ø–∞‚Ä¶")
    tgt_root = Path(cfg.target_dir).expanduser().resolve()
    if not tgt_root.is_dir():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ¬´{tgt_root}¬ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ø–æ–ø—ã—Ç–∫–∞ tqdm
    try:
        from tqdm import tqdm
        have_tqdm = True
    except ImportError:
        have_tqdm = False

    # 1) –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    all_files = []
    print("üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤‚Ä¶")
    for rule in cfg.sources:
        all_files.extend(_iter_files(rule))
    total_files = len(all_files)
    stats = Stats()
    stats.scanned = total_files

    # 2) –ê–Ω–∞–ª–∏–∑ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
    tasks = []
    if have_tqdm:
        for src in tqdm(all_files, desc="üõ† –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è‚Ä¶", unit="file"):
            rel_drive = src.drive.rstrip(":")
            rel_path = src.relative_to(src.anchor)
            dst = tgt_root / rel_drive / rel_path
            if same_file(src, dst, use_hash):
                stats.unchanged += 1
            else:
                tasks.append((src, dst))
    else:
        for i, src in enumerate(all_files, 1):
            pct = int(i / total_files * 100)
            print(f"\r –ê–Ω–∞–ª–∏–∑: {pct}% ({i}/{total_files})", end="", flush=True)
            rel_drive = src.drive.rstrip(":")
            rel_path = src.relative_to(src.anchor)
            dst = tgt_root / rel_drive / rel_path
            if same_file(src, dst, use_hash):
                stats.unchanged += 1
            else:
                tasks.append((src, dst))
        print()

    num_tasks = len(tasks)
    if num_tasks == 0:
        print("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        print(stats.summary())
        return

    print(f"‚ñ∂ {num_tasks} —Ñ–∞–π–ª(–æ–≤) –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é, {stats.unchanged} –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    if have_tqdm:
        for src, dst in tqdm(tasks, desc="–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", unit="file"):
            try:
                copy2(src, dst)
                stats.copied += 1
            except Exception as exc:
                stats.errors += 1
                tqdm.write(f"‚ùó {src} ‚Üí {dst} ({exc})")
    else:
        for i, (src, dst) in enumerate(tasks, 1):
            try:
                copy2(src, dst)
                stats.copied += 1
            except Exception as exc:
                stats.errors += 1
                print(f"\n‚ùó {src} ‚Üí {dst} ({exc})")
            pct = int(i / num_tasks * 100)
            print(f"\r –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {pct}% ({i}/{num_tasks})", end="", flush=True)
        print()

    # 4) –û—Ç—á—ë—Ç
    print(stats.summary())

    # 5) –õ–æ–≥ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
    if stats.errors:
        desktop = Path.home() / "Desktop"
        desktop.mkdir(exist_ok=True)
        fname = desktop / f"backup_errors_{datetime.now():%Y%m%d_%H%M%S}.log"
        # —Å–æ–±–µ—Ä—ë–º –æ—à–∏–±–∫–∏ –∏–∑ tqdm (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–µ—Ä–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫) –∏–ª–∏ –∏–∑ print –ª–æ–≥–∞
        # –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º —Ñ–∞–π–ª –ø—É—Å—Ç—ã–º, –¥–æ–±–∞–≤—å—Ç–µ —Å–±–æ—Ä –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–∞–¥–æ
        fname.write_text("", encoding="utf-8")
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {fname}")
