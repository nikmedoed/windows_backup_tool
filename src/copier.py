from __future__ import annotations

import os
import sys
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Iterable, Callable, Optional

from .config import Settings, PathRule
from .utils import log, copy2, same_file


# ---------- helpers -------------------------------------------------
def _norm(p: str | Path) -> Path:
    p = Path(p)
    return Path(*p.parts) if p.parts and p.parts[0] == p.root else p

def _skip(rel: Path, excluded: set[Path]) -> bool:
    for e in excluded:
        if rel == e or rel.is_relative_to(e):
            return True
    return False

def _iter_files(rule: PathRule) -> Iterable[Path]:
    root = Path(rule.source).expanduser().resolve()
    excluded = {_norm(e) for e in rule.excludes}
    for cur, subdirs, files in os.walk(root, topdown=True):
        rel_dir = Path(cur).relative_to(root)
        if _skip(rel_dir, excluded):
            subdirs[:] = []
            continue
        subdirs[:] = [d for d in subdirs if not _skip(rel_dir / d, excluded)]
        for f in files:
            rel_file = rel_dir / f
            if _skip(rel_file, excluded):
                continue
            yield root / rel_file


# ---------- —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------------------------------------------
@dataclass
class Stats:
    copied: int = 0
    unchanged: int = 0
    errors: int = 0

    def summary(self) -> str:
        return (f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {self.copied}  |  "
                f"–ù–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {self.unchanged}  |  "
                f"–û—à–∏–±–æ–∫: {self.errors}")


# ---------- public API ----------------------------------------------
def run_backup(
        cfg: Settings,
        progress: Optional[Callable[[int, int], None]] = None,
        log_cb: Optional[Callable[[str], None]] = None,
        use_hash: bool = False
) -> None:
    # 0. —Å—Ç–∞—Ä—Ç ‚Äî —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫
    log_cb and log_cb("üîç –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...")
    tgt_root = Path(cfg.target_dir).expanduser().resolve()
    if not tgt_root.is_dir():
        msg = f"Target directory ‚Äú{tgt_root}‚Äù –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        log.error(msg)
        log_cb and log_cb(f"‚ùå {msg}")
        return

    stats = Stats()
    tasks: list[tuple[Path, Path]] = []

    # 1. —Å–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å
    for rule in cfg.sources:
        for src in _iter_files(rule):
            rel_drive = src.drive.rstrip(":")
            rel_path = src.relative_to(src.anchor)
            dst = tgt_root / rel_drive / rel_path
            if same_file(src, dst, use_hash):
                stats.unchanged += 1
            else:
                tasks.append((src, dst))

    total = len(tasks)

    # 2. –∞–Ω–∞–ª–∏–∑ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω
    log_cb and log_cb("üõ† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤...")
    if total == 0:
        log_cb and log_cb("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        progress and progress(1, 1)
        return

    log_cb and log_cb(f"‚ñ∂ {total} —Ñ–∞–π–ª(–æ–≤) –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é, "
                      f"{stats.unchanged} –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    # 3. –∞–≤—Ç–æ–ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    if progress is None and sys.stdout.isatty():
        try:
            from tqdm import tqdm
            bar = tqdm(total=total, unit="file")
            def _p(*_): bar.update()
            progress = _p
        except ModuleNotFoundError:
            pass

    # 4. –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    errors: list[str] = []
    for i, (src, dst) in enumerate(tasks, 1):
        try:
            copy2(src, dst)
            stats.copied += 1
        except Exception as exc:
            msg = f"‚ùóERROR: {src} ‚Üí {dst} ({exc})"
            log.error(msg)
            log_cb and log_cb(msg)
            errors.append(msg)
            stats.errors += 1
        if progress:
            progress(i, total)

    # 5. —Ñ–∏–Ω–∞–ª
    log_cb and log_cb("üîî " + stats.summary())

    # 6. –æ—à–∏–±–∫–∏ ‚Äî –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ Desktop
    if errors:
        desktop = Path.home() / "Desktop"
        desktop.mkdir(exist_ok=True)
        fname = desktop / f"backup_errors_{datetime.now():%Y%m%d_%H%M%S}.log"
        fname.write_text("\n".join(errors), encoding="utf-8")
        log_cb and log_cb(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {fname}")
